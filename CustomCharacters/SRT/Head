-- Converted using Mokiros's Model to Script Version 3
-- Converted string size: 2888 characters
local function Decode(str)
	local StringLength = #str
	
	-- Base64 decoding
	do
		local decoder = {}
		for b64code, char in pairs(('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='):split('')) do
			decoder[char:byte()] = b64code-1
		end
		local n = StringLength
		local t,k = table.create(math.floor(n/4)+1),1
		local padding = str:sub(-2) == '==' and 2 or str:sub(-1) == '=' and 1 or 0
		for i = 1, padding > 0 and n-4 or n, 4 do
			local a, b, c, d = str:byte(i,i+3)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40 + decoder[d]
			t[k] = string.char(bit32.extract(v,16,8),bit32.extract(v,8,8),bit32.extract(v,0,8))
			k = k + 1
		end
		if padding == 1 then
			local a, b, c = str:byte(n-3,n-1)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000 + decoder[c]*0x40
			t[k] = string.char(bit32.extract(v,16,8),bit32.extract(v,8,8))
		elseif padding == 2 then
			local a, b = str:byte(n-3,n-2)
			local v = decoder[a]*0x40000 + decoder[b]*0x1000
			t[k] = string.char(bit32.extract(v,16,8))
		end
		str = table.concat(t)
	end
	
	local Position = 1
	local function Parse(fmt)
		local Values = {string.unpack(fmt,str,Position)}
		Position = table.remove(Values)
		return table.unpack(Values)
	end
	
	local Settings = Parse('B')
	local Flags = Parse('B')
	Flags = {
		--[[ValueIndexByteLength]] bit32.extract(Flags,6,2)+1,
		--[[InstanceIndexByteLength]] bit32.extract(Flags,4,2)+1,
		--[[ConnectionsIndexByteLength]] bit32.extract(Flags,2,2)+1,
		--[[MaxPropertiesLengthByteLength]] bit32.extract(Flags,0,2)+1,
		--[[Use Double instead of Float]] bit32.band(Settings,0b1) > 0
	}
	
	local ValueFMT = ('I'..Flags[1])
	local InstanceFMT = ('I'..Flags[2])
	local ConnectionFMT = ('I'..Flags[3])
	local PropertyLengthFMT = ('I'..Flags[4])
	
	local ValuesLength = Parse(ValueFMT)
	local Values = table.create(ValuesLength)
	local CFrameIndexes = {}
	
	local ValueDecoders = {
		--!!Start
		[1] = function(Modifier)
			return Parse('s'..Modifier)
		end,
		--!!Split
		[2] = function(Modifier)
			return Modifier ~= 0
		end,
		--!!Split
		[3] = function()
			return Parse('d')
		end,
		--!!Split
		[4] = function(_,Index)
			table.insert(CFrameIndexes,{Index,Parse(('I'..Flags[1]):rep(3))})
		end,
		--!!Split
		[5] = {CFrame.new,Flags[5] and 'dddddddddddd' or 'ffffffffffff'},
		--!!Split
		[6] = {Color3.fromRGB,'BBB'},
		--!!Split
		[7] = {BrickColor.new,'I2'},
		--!!Split
		[8] = function(Modifier)
			local len = Parse('I'..Modifier)
			local kpts = table.create(len)
			for i = 1,len do
				kpts[i] = ColorSequenceKeypoint.new(Parse('f'),Color3.fromRGB(Parse('BBB')))
			end
			return ColorSequence.new(kpts)
		end,
		--!!Split
		[9] = function(Modifier)
			local len = Parse('I'..Modifier)
			local kpts = table.create(len)
			for i = 1,len do
				kpts[i] = NumberSequenceKeypoint.new(Parse(Flags[5] and 'ddd' or 'fff'))
			end
			return NumberSequence.new(kpts)
		end,
		--!!Split
		[10] = {Vector3.new,Flags[5] and 'ddd' or 'fff'},
		--!!Split
		[11] = {Vector2.new,Flags[5] and 'dd' or 'ff'},
		--!!Split
		[12] = {UDim2.new,Flags[5] and 'di2di2' or 'fi2fi2'},
		--!!Split
		[13] = {Rect.new,Flags[5] and 'dddd' or 'ffff'},
		--!!Split
		[14] = function()
			local flags = Parse('B')
			local ids = {"Top","Bottom","Left","Right","Front","Back"}
			local t = {}
			for i = 0,5 do
				if bit32.extract(flags,i,1)==1 then
					table.insert(t,Enum.NormalId[ids[i+1]])
				end
			end
			return Axes.new(unpack(t))
		end,
		--!!Split
		[15] = function()
			local flags = Parse('B')
			local ids = {"Top","Bottom","Left","Right","Front","Back"}
			local t = {}
			for i = 0,5 do
				if bit32.extract(flags,i,1)==1 then
					table.insert(t,Enum.NormalId[ids[i+1]])
				end
			end
			return Faces.new(unpack(t))
		end,
		--!!Split
		[16] = {PhysicalProperties.new,Flags[5] and 'ddddd' or 'fffff'},
		--!!Split
		[17] = {NumberRange.new,Flags[5] and 'dd' or 'ff'},
		--!!Split
		[18] = {UDim.new,Flags[5] and 'di2' or 'fi2'},
		--!!Split
		[19] = function()
			return Ray.new(Vector3.new(Parse(Flags[5] and 'ddd' or 'fff')),Vector3.new(Parse(Flags[5] and 'ddd' or 'fff')))
		end
		--!!End
	}
	
	for i = 1,ValuesLength do
		local TypeAndModifier = Parse('B')
		local Type = bit32.band(TypeAndModifier,0b11111)
		local Modifier = (TypeAndModifier - Type) / 0b100000
		local Decoder = ValueDecoders[Type]
		if type(Decoder)=='function' then
			Values[i] = Decoder(Modifier,i)
		else
			Values[i] = Decoder[1](Parse(Decoder[2]))
		end
	end
	
	for i,t in pairs(CFrameIndexes) do
		Values[t[1]] = CFrame.fromMatrix(Values[t[2]],Values[t[3]],Values[t[4]])
	end
	
	local InstancesLength = Parse(InstanceFMT)
	local Instances = {}
	local NoParent = {}
	
	for i = 1,InstancesLength do
		local ClassName = Values[Parse(ValueFMT)]
		local obj
		local MeshPartMesh,MeshPartScale
		if ClassName == "UnionOperation" then
			obj = DecodeUnion(Values,Flags,Parse)
			obj.UsePartColor = true
		elseif ClassName:find("Script") then
			obj = Instance.new("Folder")
			Script(obj,ClassName=='ModuleScript')
		elseif ClassName == "MeshPart" then
			obj = Instance.new("Part")
			MeshPartMesh = Instance.new("SpecialMesh")
			MeshPartMesh.MeshType = Enum.MeshType.FileMesh
			MeshPartMesh.Parent = obj
		else
			obj = Instance.new(ClassName)
		end
		local Parent = Instances[Parse(InstanceFMT)]
		local PropertiesLength = Parse(PropertyLengthFMT)
		local AttributesLength = Parse(PropertyLengthFMT)
		Instances[i] = obj
		for i = 1,PropertiesLength do
			local Prop,Value = Values[Parse(ValueFMT)],Values[Parse(ValueFMT)]
			
			-- ok this looks awful
			if MeshPartMesh then
				if Prop == "MeshId" then
					MeshPartMesh.MeshId = Value
					continue
				elseif Prop == "TextureID" then
					MeshPartMesh.TextureId = Value
					continue
				elseif Prop == "Size" then
					if not MeshPartScale then
						MeshPartScale = Value
					else
						MeshPartMesh.Scale = Value / MeshPartScale
					end
				elseif Prop == "MeshSize" then
					if not MeshPartScale then
						MeshPartScale = Value
						MeshPartMesh.Scale = obj.Size / Value
					else
						MeshPartMesh.Scale = MeshPartScale / Value
					end
					continue
				end
			end
			
			obj[Prop] = Value
		end
		if MeshPartMesh then
			if MeshPartMesh.MeshId=='' then
				if MeshPartMesh.TextureId=='' then
					MeshPartMesh.TextureId = 'rbxasset://textures/meshPartFallback.png'
				end
				MeshPartMesh.Scale = obj.Size
			end
		end
		for i = 1,AttributesLength do
			obj:SetAttribute(Values[Parse(ValueFMT)],Values[Parse(ValueFMT)])
		end
		if not Parent then
			table.insert(NoParent,obj)
		else
			obj.Parent = Parent
		end
	end
	
	local ConnectionsLength = Parse(ConnectionFMT)
	for i = 1,ConnectionsLength do
		local a,b,c = Parse(InstanceFMT),Parse(ValueFMT),Parse(InstanceFMT)
		Instances[a][Values[b]] = Instances[c]
	end
	
	return NoParent
end

local partfile = Instance.new("Folder")
local Objects = Decode('AACBIQRQYXJ0IQROYW1lIRtCbG9iYnlibG9iQnVpbGRfRG9jdG9yV2luZHkhCEFuY2hvcmVkIiENQm90dG9tU3VyZmFjZQMAAAAAAAAAACEKQnJpY2tDb2xvcgfpAyEGQ0ZyYW1lBBF6eyEFQ29sb3IG+Pj4IQhNYXRlcmlhbAMAAAAAAICUQCEIUG9zaXRpb24KWMre'
..'wbE9p0EMUklCIQRTaXplCgEAQD/RzMw+zMzMPyEKVG9wU3VyZmFjZSELU3BlY2lhbE1lc2ghBVNjYWxlCjEILDwxCCw8WDk0PCEGTWVzaElkIRdyYnhhc3NldGlkOi8vMzMyNzM1NTU1MyEJVGV4dHVyZUlkIRdyYnhhc3NldGlkOi8vMzMyNzM2MDcxNyEITWVzaFR5'
..'cGUDAAAAAAAAFEAhC0JhY2tTdXJmYWNlAwAAAAAAACRAAwAAAAAAAABAB30ABCZ6ewbquJIhDEZyb250U3VyZmFjZSELTGVmdFN1cmZhY2UK2HrawXFco0HsUUlCIQxSaWdodFN1cmZhY2UKmpmZPwAAgD+amZk/CgrXIzwK1yM8CtcjPCEXcmJ4YXNzZXRpZDovLzMz'
..'MjczNTYzMjMhF3JieGFzc2V0aWQ6Ly8zMzI3MzYwMzQzBxoABDF8fQYvLS8hC09yaWVudGF0aW9uCgAAcMIAALTCAAAAAArYwuHBWXKpQU1aSUIhCFJvdGF0aW9uCgAAtMIAAPDBAAC0wgoAAIA+9P//PTYzsz4hC1ZlcnRleENvbG9yClK4Pj9SuD4/Urg+PyEXcmJ4'
..'YXNzZXRpZDovLzU3OTU5NTUyMjMHFQAEPX5/Bv8tLQMAAAAAAICYQAoAAAAAAAAAAAAAcMIKmAflwY9uqUHMqEhCCs3MTD0EAAA+AAAAPiEMVHJhbnNwYXJlbmN5AwAAAAAAAOg/AwAAAAAAAAhABEN6ewrY1tzBd9yiQexRSUIKmJmZP2Zmlj+amdk/IRdyYnhhc3Nl'
..'dGlkOi8vMzMyNzU4MzAzMiEXcmJ4YXNzZXRpZDovLzM3OTc5NDIzNjUhB1RleHR1cmUhBEZhY2UhF3JieGFzc2V0aWQ6Ly81MTY2ODM1NDg4BEt6ewpYwtPBcuGkQSxSSUIKkcL1PtHMzD6E65E/IRdyYnhhc3NldGlkOi8vMzMyNzM1NTA0NyEXcmJ4YXNzZXRpZDov'
..'LzMzMjczNjI4NTgEUHp7ClhG2sFWXKVBDFJJQgpnZqY/NDPTP8zMzD8hF3JieGFzc2V0aWQ6Ly8zMzI3MzU3NjcxIRdyYnhhc3NldGlkOi8vMzMyNzM2MjE0OARVfH0KWLvjwd8ZqEHMCkpCCs3MTD6amZk+AAAAPyEXcmJ4YXNzZXRpZDovLzU3OTU5NjgxNjUEWXx9'
..'Cli748HfGahBjKlIQgrOzEw+mpmZPgAAAD8hF3JieGFzc2V0aWQ6Ly81Nzk1OTYyOTU3BF6AewoAAAAAAAC0wgAAAAAK2DTgwdIEqUEsWklCCpqZmT5jZqY+nZmZPiEXcmJ4YXNzZXRpZDovLzU3OTU5NDk3ODMEY4F7CgAAAAAAALRCAAAAAArYctrBDPaiQexRSUIK'
..'AAAAQAAAgD8AAIA/CgAAoD8AAKA/AACgPwRoensGJiYmChhS3MFA36RBDFJJQgoB4sA+AeLAPQHiQD4KZ04aPGdOGjxnTho8IRdyYnhhc3NldGlkOi8vMzMyNzU4MzE4MQRtfn8KmAflwY9uqUEsD0pCBG98fQrYdePB3mOpQU1aSUIKzczMPpeZmT42M7M+IRdyYnhh'
..'c3NldGlkOi8vNTc5NTk1Njg5NwfrAwR1ensGERERChjP3sGsuKRBDFJJQgMAAACgmZnJPyEXcmJ4YXNzZXRpZDovLzMzMjc1ODMyNjghBk1pZGRsZQoA16M8CtejPADXozwKAACAPwAAAAAL2B+0CgAAAAAAAIA/AAAAAArKFSm478rDNwAAgD8KiLFdPwAEAD+c8cI3'
..'CrH6/z5ftV2/WwcQtApftV0/sfr/Pm2dG7QKC9gfNAAAAAAAAIA/CgvYH7QAAAAAAACAvyABAAoAAgMEBQYHCAkKCwwNDg8QERITFAcVAQQAFhcYGRobHB0BAA4AAgMEBR4fBiAIIQoiDCMkHyUfDg8QJicfEigUHxUDBAAWKRgqGiscHQEADAACAwQFBgcILAotDC4O'
..'Dy8wEDEyMxI0FAcVBQMANTYYNxwdAQANAAIDBAUGBwg4CjkMOg47LzwQPTI8Ej4UBz9AFQcBABxBAQAOAAIDBAUeHwYfCCEKQgwjJB8lHw4PEEMnHxJEFB8VCQQAFikYRRpGHB1HCQIASEFHSQEACgACAwQFBgcICQpKDA0ODxBLEkwUBxUMBAAWFxhNGk4cHQEACgAC'
..'AwQFBgcICQpPDA0ODxBQElEUBxUOBAAWFxhSGlMcHQEADAACAwQFBgcILApUDC4ODy8wEFUyMxJWFAcVEAMANTYYVxwdAQAMAAIDBAUGBwgsClgMLg4PLzAQWTIzEloUBxUSAwA1NhhbHB0BAAwAAgMEBQYHCCwKXAwuDg8vXRBeMl0SXxQHFRQDADU2GGAcHQEAEAAC'
..'AwQFHh8GIAghCmEMIyQfJR8ODy9iEGMnHzJiEmQUHxUWAQAWZQEACgACAwQFBgcILApmDGcODxBoEmkUBxUYAwAWahhrHB0BAA0AAgMEBQYHCDgKbAw6DjsvPBBtMjwSPhQHP0AVGgEAHEEBAAwAAgMEBQYHCCwKbgwuDg8vMBBvMjMScBQHFRwDADU2GHEcHQEACwAC'
..'AwQFBgcIcgpzDHQODxB1EmkUBz92FR4DABZqGHccHQEADgACeAQFHh8GIAghCiIMIyQfJR8ODxAmJx8SeRQfAA==')
for _,obj in pairs(Objects) do
	obj.Parent =partfile
end
local g = partfile
g.Parent = owner.Character
local C = g:GetChildren()
for i=1, #C do
	if C[i].className == "Part" or C[i].className == "UnionOperation" or C[i].className == "WedgePart" or C[i].className == "MeshPart"  then
		local W = Instance.new("Weld")
		W.Part0 = g.Middle
		W.Part1 = C[i]
		local CJ = CFrame.new(g.Middle.Position)
		local C0 = g.Middle.CFrame:inverse()*CJ
		local C1 = C[i].CFrame:inverse()*CJ
		W.C0 = C0
		W.C1 = C1
		W.Parent = g.Middle
	end
	local Y = Instance.new("Weld")
	Y.Part0 = hit.Parent.Head
	Y.Part1 = g.Middle
	Y.C0 = CFrame.new(0, 0, 0)
	Y.Parent = Y.Part0
end

local h = g:GetChildren()
for i = 1, # h do
	if h[i].className == "Part" or C[i].className == "UnionOperation" or C[i].className == "WedgePart" or C[i].className == "MeshPart"  then
		h[i].Anchored = false
		h[i].CanCollide = false
	end
end
